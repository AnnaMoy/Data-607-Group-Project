knitr::opts_chunk$set(echo = TRUE)
map_data_2020 <- movie %>%
select(year, country, budget, gross) %>%
mutate( profit = gross-budget) %>%
na.omit(gross) %>%
filter(year == 2020) %>%
group_by(country) %>%
summarise(total_gross_income = sum(gross))
knitr::opts_chunk$set(echo = TRUE)
#load library
library(tidyverse)
library(rvest)
library(lubridate)
library(sf)
library(ggrepel)
library(countrycode)
library(rnaturalearth)
#read csv file from kaggle
movie <- read_csv("https://raw.githubusercontent.com/AnnaMoy/Data-607-Project/main/movies.csv")
movie
# Webscraping from Boxoffice Mojo website
# link to the website
url <- "https://www.boxofficemojo.com/year/2020/"
# read url link
webpage <- read_html(url)
# pull in movie title, gross, total gross and release date from 2020 movie information
gross_2020 <- html_nodes(webpage, ".mojo-field-type-date , .mojo-estimatable , .mojo-cell-wide") %>%
html_text()
# put the information into a dataframe
df <- data.frame(gross = gross_2020)
head(df,20)
# All the data was in one column therefore we split up the data into their own columns and provided new column names
df <- df %>%
mutate(ind = rep(c("title", "gross_data", "total_gross","date"),length.out = n())) %>%
group_by(ind) %>%
mutate(id = row_number()) %>%
spread(ind, gross) %>%
select(-id)
#remove line 1 which initially has the old titles
moviedf <- df[-1,]
# Transform the release date in the kaggle movie dataset
movie<- movie %>%
separate_wider_delim(released, delim =" (", names= c("date","location"))
#convert release date into date format
movie$date <- mdy(movie$date)
#add in year and quarter
movie<-movie %>%
mutate(qtr= quarter(date,with_year = T))
#joining the data for kaggle movie and webscraped data from Box Office Mojo
movie_df <-inner_join(movie, moviedf, by=c("name" = "title"))
#creating a subset and filter for 2020 movies
movie2020 <- movie_df %>%
filter(year %in% c("2020"))
movie2020_numeric <- movie2020
#converting gross income into a numeric value for analysis
movie2020_numeric$total_gross_numeric <- movie2020_numeric$total_gross
movie2020_numeric$total_gross_numeric <- as.character(gsub("\\$", "", movie2020_numeric$total_gross_numeric))
movie2020_numeric$total_gross_numeric <- as.numeric(gsub(",", "", movie2020_numeric$total_gross_numeric))
#displaying highest gross incomes first
movie2020_numeric <- movie2020_numeric[order(movie2020_numeric$total_gross_numeric, decreasing = TRUE),]
movie2020_numeric
#creating a subset and filter for 2019 movies
movie2019 <- movie_df %>%
filter(year %in% c("2019"))
movie2019_numeric <- movie2019
#converting gross income into a numeric value for analysis
movie2019_numeric$total_gross_numeric <- movie2019_numeric$total_gross
movie2019_numeric$total_gross_numeric <- as.character(gsub("\\$", "", movie2019_numeric$total_gross_numeric))
movie2019_numeric$total_gross_numeric <- as.numeric(gsub(",", "", movie2019_numeric$total_gross_numeric))
#displaying highest gross incomes first
movie2019_numeric <- movie2019_numeric[order(movie2019_numeric$total_gross_numeric, decreasing = TRUE),]
movie2019_numeric
ggplot(movie2020_numeric, aes(x = budget, y = total_gross_numeric)) +
geom_point() +
labs(title = "Budget vs Total Gross for Movies (2020)",
x = "Budget (in million $)",
y = "Total Gross (in million $)") +
theme_minimal()
ggplot(movie2019_numeric, aes(x = budget, y = total_gross_numeric)) +
geom_point() +
labs(title = "Budget vs Total Gross for Movies (2019)",
x = "Budget (in million $)",
y = "Total Gross (in million $)") +
theme_minimal()
#finding difference
movie2020_numeric$profit <- movie2020_numeric$total_gross_numeric - movie2020_numeric$budget
# Create a new column indicating whether the movie made a profit or not
movie2020_numeric$profitable <- ifelse(movie2020_numeric$profit > 0, "Profitable", "Not Profitable")
# Create the visualization
ggplot(movie2020_numeric, aes(x = budget, y = total_gross_numeric, color = profitable)) +
geom_point() +
labs(title = "Budget vs Total Gross for Movies (2020)",
x = "Budget (in million $)",
y = "Total Gross (in million $)",
color = "Profitability") +
theme_minimal()
#finding difference
movie2019_numeric$profit <- movie2019_numeric$total_gross_numeric - movie2019_numeric$budget
# Create a new column indicating whether the movie made a profit or not
movie2019_numeric$profitable <- ifelse(movie2019_numeric$profit > 0, "Profitable", "Not Profitable")
# Create the visualization
ggplot(movie2019_numeric, aes(x = budget, y = total_gross_numeric, color = profitable)) +
geom_point() +
labs(title = "Budget vs Total Gross for Movies (2019)",
x = "Budget (in million $)",
y = "Total Gross (in million $)",
color = "Profitability") +
theme_minimal()
# Sort the dataset by profit in descending order
movie2020_numeric_sorted <- movie2020_numeric[order(-movie2020_numeric$profit), ]
# We'll look at the top 5 movies
top_5_profitable <- head(movie2020_numeric_sorted, 5)
print(top_5_profitable[, c("name", "budget", "total_gross", "profit")])
#finding difference
movie2019_numeric$profit <- movie2019_numeric$total_gross_numeric - movie2019_numeric$budget
# Create a new column indicating whether the movie made a profit or not
movie2019_numeric$profitable <- ifelse(movie2019_numeric$profit > 0, "Profitable", "Not Profitable")
# Sort the dataset by profit in descending order
movie2019_numeric_sorted <- movie2019_numeric[order(-movie2019_numeric$profit), ]
# We'll look at the top 5 movies
top_5_profitable_2019 <- head(movie2019_numeric_sorted, 5)
print(top_5_profitable_2019[, c("name", "budget", "total_gross", "profit")])
map_data <- movie %>%
select(year, country, budget, gross) %>%
mutate( profit = gross-budget) %>%
na.omit(gross) %>%
filter(year <= 2010) %>%
group_by(country) %>%
summarise(total_income = sum(profit))
#Add ISO which is a 3 letters code for each country  for Join function to work
data_with_iso <- map_data %>%
mutate(Iso3 = countrycode::countrycode(
sourcevar = country,
origin = "country.name",
destination = "iso3c"))
#
world <- ne_countries(scale = "small", returnclass = "sf")
countries_movie_consumption <- world %>%
select(geometry, name, iso_a3) %>%
left_join(data_with_iso, by = c("iso_a3" = "Iso3"))
world %>%
st_transform(crs = "+proj=robin") %>%
ggplot() +
geom_sf(color = "darkgray") +
geom_sf(data = countries_movie_consumption, aes(fill = total_income)) +
theme_minimal() +
labs(
title = "World Movie Revenue by Country from 2010 - 2020",
subtitle = "Total Gross Income from Movies in million",
fill = "Total Gross Income (USD)"
)
map_data_2020 <- movie %>%
select(year, country, budget, gross) %>%
mutate( profit = gross-budget) %>%
na.omit(gross) %>%
filter(year == 2020) %>%
group_by(country) %>%
summarise(total_gross_income = sum(gross))
data_with_iso <- map_data_2020 %>%
mutate(Iso3 = countrycode::countrycode(
sourcevar = country,
origin = "country.name",
destination = "iso3c"))
world_2020 <- ne_countries(scale = "small", returnclass = "sf")
countries_movie_consumption_2020 <- world_2020 %>%
select(geometry, name, iso_a3) %>%
left_join(data_with_iso, by = c("iso_a3" = "Iso3"))
world_2020 %>%
st_transform(crs = "+proj=robin") %>%
ggplot() +
geom_sf(color = "darkgray") +
geom_sf(data = countries_movie_consumption_2020, aes(fill = total_gross_income)) +
theme_minimal() +
labs(
title = "World Movie Revenue by Country from 2020",
subtitle = "Total Gross Income from Movies in million",
fill = "Total Gross Income (USD)"
)
#creating a subset and filter for 2019 and 2020 movies
movieall <- movie_df %>%
filter(year %in% c("2019", "2020"))
#converting gross income into a numeric value for analysis
movieall$total_gross_numeric <- movieall$total_gross
movieall$total_gross_numeric <- as.character(gsub("\\$", "", movieall$total_gross_numeric))
movieall$total_gross_numeric <- as.numeric(gsub(",", "", movieall$total_gross_numeric))
#displaying highest gross incomes first
movieall2 <- movieall[order(movieall$total_gross_numeric, decreasing = TRUE),]
# 2019 and 2020 movie gross data
movieall3 <- movieall2 %>%
mutate(profit = (total_gross_numeric- budget))
#T Test
t.test(profit ~ year, data = movieall3)
#Make a copy of the year column
movieall3$yearchar = movieall3$year
# change yearchar to categorical
movieall3$yearchar <- as.factor(movieall3$yearchar)
#boxplot for year and profits
ggplot(movieall3, aes(yearchar, profit)) +
geom_boxplot() +
labs(
title = "Movie Profit for 2019 and 2020",
x = "Years",
y = "Profit")
#First we create a data frame with the relevent information needed for the map.
map_data <- movie %>%
select(year, country, budget, gross) %>%
mutate( profit = gross-budget) %>%  #created a new variable named profit, which calculates the net profit per movie.
na.omit(gross) %>% #removed empty variables
filter(year == 2019) %>% #filtered for year 2019
group_by(country) %>%
summarise(total_income = sum(profit))
#First we create a data frame with the relevent information needed for the map.
map_data <- movie %>%
select(year, country, budget, gross) %>%
mutate( profit = gross-budget) %>%  #created a new variable named profit, which calculates the net profit per movie.
na.omit(gross) %>% #removed empty variables
filter(year == 2019) %>% #filtered for year 2019
group_by(country) %>%
summarise(total_income = sum(profit))
#Add ISO which is a 3 letters code for each country  for Join function to work
data_with_iso <- map_data %>%
mutate(Iso3 = countrycode::countrycode(
sourcevar = country,
origin = "country.name",
destination = "iso3c"))
#
world <- ne_countries(scale = "small", returnclass = "sf")
countries_movie_consumption <- world %>%
select(geometry, name, iso_a3) %>%
left_join(data_with_iso, by = c("iso_a3" = "Iso3"))
world %>%
st_transform(crs = "+proj=robin") %>%
ggplot() +
geom_sf(color = "darkgray") +
geom_sf(data = countries_movie_consumption, aes(fill = total_income)) +
theme_minimal() +
labs(
title = "World Movie Revenue by Country from 2010 - 2020",
subtitle = "Total Gross Income from Movies in million",
fill = "Total Gross Income (USD)"
)
map_data_2020 <- movie %>%
select(year, country, budget, gross) %>%
mutate( profit = gross-budget) %>%
na.omit(gross) %>%
filter(year == 2020) %>%
group_by(country) %>%
summarise(total_gross_income = sum(gross))
data_with_iso <- map_data_2020 %>%
mutate(Iso3 = countrycode::countrycode(
sourcevar = country,
origin = "country.name",
destination = "iso3c"))
world_2020 <- ne_countries(scale = "small", returnclass = "sf")
countries_movie_consumption_2020 <- world_2020 %>%
select(geometry, name, iso_a3) %>%
left_join(data_with_iso, by = c("iso_a3" = "Iso3"))
world_2020 %>%
st_transform(crs = "+proj=robin") %>%
ggplot() +
geom_sf(color = "darkgray") +
geom_sf(data = countries_movie_consumption_2020, aes(fill = total_gross_income)) +
theme_minimal() +
labs(
title = "World Movie Revenue by Country from 2020",
subtitle = "Total Gross Income from Movies in million",
fill = "Total Gross Income (USD)"
)
map_data_2020 <- movie %>%
select(year, country, budget, gross) %>%
mutate( profit = gross-budget) %>%
na.omit(gross) %>%
filter(year == 2020) %>%
group_by(country) %>%
summarise(total_gross_income = sum(gross))
data_with_iso <- map_data_2020 %>%
mutate(Iso3 = countrycode::countrycode(
sourcevar = country,
origin = "country.name",
destination = "iso3c"))
world_2020 <- ne_countries(scale = "small", returnclass = "sf")
countries_movie_consumption_2020 <- world_2020 %>%
select(geometry, name, iso_a3) %>%
left_join(data_with_iso, by = c("iso_a3" = "Iso3"))
world_2020 %>%
st_transform(crs = "+proj=robin") %>%
ggplot() +
geom_sf(color = "darkgray") +
geom_sf(data = countries_movie_consumption_2020, aes(fill = total_gross_income)) +
theme_minimal() +
labs(
title = "World Movie Revenue by Country for 2020",
subtitle = "Total Gross Income from Movies in million",
fill = "Total Gross Income (USD)"
)
#First we create a data frame with the relevent information needed for the map.
map_data <- movie %>%
select(year, country, budget, gross) %>%
mutate( profit = gross-budget) %>%  #created a new variable named profit, which calculates the net profit per movie.
na.omit(gross) %>% #removed empty variables
filter(year == 2019) %>% #filtered for year 2019
group_by(country) %>% #grouped by country
summarise(total_income = sum(profit))
#Add ISO which is a 3 letters code for each country  for Join function to work. This uses the countrycode package's countrycode function to convert country names in the "country" column into ISO 3166-1 alpha-3 country codes.
data_with_iso <- map_data %>%
mutate(Iso3 = countrycode::countrycode(
sourcevar = country,
origin = "country.name",
destination = "iso3c"))
#The following code uses the ne_countries function from the rnaturalearth package to retrieve a dataset containing geometrical information (e.g., boundaries) of countries worldwide.
world <- ne_countries(scale = "small", returnclass = "sf")
#The following code combining the data frame we created above with data with ISO which will give the co ordinations of each country.
countries_movie_consumption <- world %>%
select(geometry, name, iso_a3) %>%
left_join(data_with_iso, by = c("iso_a3" = "Iso3"))
#The following code generates a map visualization showing the distribution of movie revenue by country for 2019, with darker shades representing higher revenue.
world %>%
st_transform(crs = "+proj=robin") %>% #This first transforms the geometrical data in the "world" dataset to use the Robinson projection. The Robinson projection is a pseudo-cylindrical projection commonly used for world maps.
ggplot() +
geom_sf(color = "darkgray") +
geom_sf(data = countries_movie_consumption, aes(fill = total_income)) +
theme_minimal() +
labs(
title = "World Movie Revenue by Country for 2019",
subtitle = "Total Gross Income from Movies in million",
fill = "Total Gross Income (USD)"
)
m_full <- lm(score ~ rank + gender + ethnicity + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
m_full <- lm(score ~ rank + gender + ethnicity + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
# Chunk 1: global_options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
# Chunk 2: load-packages
library(tidyverse)
library(openintro)
library(GGally)
# Chunk 3
glimpse(evals)
# Chunk 5
hist(evals$score)
# Chunk 6
evals <- evals
boxplot(evals$score ~ evals$cls_students)
evals %>%
ggplot(aes(score, cls_students))+
geom_point()
# Chunk 7: scatter-score-bty_avg
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_point()
# Chunk 8: scatter-score-bty_avg-jitter
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter()
# Chunk 9
m_bty <- lm(evals$score ~ evals$bty_avg)
plot(jitter(evals$score,factor=1.2) ~ jitter(evals$bty_avg,factor=1.2))
abline(m_bty)
# Chunk 10
cor(evals$score, evals$bty_avg)
summary(m_bty)
# Chunk 11: scatter-score-bty_avg-line-se
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm")
# Chunk 12: scatter-score-bty_avg-line
ggplot(data = evals, aes(x = bty_avg, y = score)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
# Chunk 13
par(mfrow = c(2,2))
plot(m_bty)
# Chunk 14: bty-rel
ggplot(data = evals, aes(x = bty_f1lower, y = bty_avg)) +
geom_point()
evals %>%
summarise(cor(bty_avg, bty_f1lower))
# Chunk 15: bty-rels
evals %>%
select(contains("bty")) %>%
ggpairs()
# Chunk 16: scatter-score-bty_avg_pic-color
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
# Chunk 17
hist(m_bty_gen$residuals)
# Chunk 18
qqnorm(m_bty_gen$residuals)
qqline(m_bty_gen$residuals)
# Chunk 19
plot(m_bty_gen$residuals ~ evals$bty_avg)
abline(h = 0 )
# Chunk 20
summary(m_bty_gen)
# Chunk 21: twoLines
ggplot(data = evals, aes(x = bty_avg, y = score, color = pic_color)) +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE)
# Chunk 22
m_bty_rank <- lm(score ~ bty_avg + rank, data = evals)
summary(m_bty_rank)
m_full <- lm(score ~ rank + gender + ethnicity + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
summary( lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals))
lm_model <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals))
summary(lm_model)
lm_model <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals))
summary(lm_model)
lm_model <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals))
lm_model <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals))
lm_model <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals))
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
best_model <- step(m_full, direction = 'backward')
summary(best_model)
best_model <- step(m_full, direction = 'backward')
plot(final_model)
plot(final_model)
plot(best_model)
hist(best_model$residuals)
# load data
